package Theory;

public class Cycles {
    public static void main(String[] args) {
// Цикл While
        //Форма цикла while следующая:
        //while (условие*) {
        //тело цикла
        //Напишем счетчик от 10 до 0

/*      int counterOne = 10;
        while (counterOne > 0) {
            System.out.println("Осталось " + counterOne + " сек.");
            counterOne--;
        }
*/
        //Напишем счетчик от 1 до 10
/*
        int counterTwo = 1;
        while (counterTwo < 11) {
            System.out.println(counterTwo + " сек.");
            counterTwo++;
        }
*/

        //Если в цикле используется только один оператор, то фигурные скобки можно опустить
        //Но лучше так не делать

/*      int x = 1;
        while (x < 5)
            x++;
        System.out.println(x);
 */
        //Ключевым моментом цикла while в Java является то, что цикл может ни разу не выполниться.
        //Когда проверяется условие и результат является ложным, тело цикла будет пропущено, и выполнится первая строчка после цикла while.

/*      boolean isHungry; // голоден ли кот
        isHungry = true; // где вы видали сытого кота?
        while (!isHungry) {
            System.out.println("Случилось чудо - кот не голоен");
        }
*/

        //Обратный пример - бесконечный цикл.
        //Создадим условие, которое всегда имеет значение true.

/*      boolean isHungry1; // голоден ли кот
        isHungry1 = true; // где вы видели сытого кота?
        while (isHungry1) {
            System.out.println("Кот голодный...");
        }
*/
        //Тело цикла while может быть пустым. Например:
/*        int i = 10;
        int j = 30;
        //вычислить среднее значение двух переменных
        while (++i < --j) {
            //у цикла нет тела
        }
        System.out.println("Среднее значение равно " + i);
*/

//Пример работает следующим образом:
//Значение переменной i увеличивается, а значение переменной j уменьшается на единицу
//Затем программа сравнивает два новых значения переменных. Если новое значение переменной i меньше нового значения переменной j, то цикл повторяется.
//На каком-то этапе значения обеих переменных сравняются и цикл прекратит свою работу. При этом переменная i будет содержать среднее значение исходных значений двух переменных.
//Достаточно изуверский способ вычисления среднего значения, но здесь главное увидеть пример цикла без тела. Все действия выполняются внутри самого условного выражения. Учтите, если значение первой переменной с самого начала будет больше второй переменной, то код пойдёт коту под хвост.
//Профессиональные программисты часто используют циклы без тела, в которых само по себе управляющее выражение может выполнять все необходимые действия.

//Цикл Do...While
//Синтаксис цикла do...while в Java:
//      do (операторы) {
//      операторы
//      } while (логическое выражение);
//        Повторим, что отличие цикла do-while от цикла while состоит в том, что цикл do-while выполняется по крайней мере один раз, даже если условие изначально ложно.
//        В цикле while такое не произойдёт, так как тело цикла не отработает.
//        Цикл do-while используется реже, чем while.
//        Бывают ситуации, когда проверку прерывания цикла желательно выполнять в конце цикла, а не в его начале. И данный цикл позволяет это сделать.
//        При каждом повторении цикла do-while программа сначала выполняет тело цикла, а затем вычисляет условное выражение. Если это выражение истинно, то цикл повторяется. В противном случае выполнение цикла прерывается.
//        Как и в других циклах Java, условие должно иметь булево значение.
//        Перепишем пример из урока по циклу while на новый лад с использованием цикла do-while:

/*    int counter = 1;
    do {
        System.out.println("Осталось " + counter + " сек.");
        counter--;
    } while (counter < 0);
*/

//Пример можно переписать следующим образом:

/*        int counter = 10;
        do {
            System.out.println("Осталось " + counter + " сек.");
        } while ( --counter > 0);

*/
//  Цикл For
// Цикл for — цикл со счётчиком – выполняется и при каждой итерации обновляет счетчик,
// пока условие в объявлении цикла соблюдается (т.е. проверка условия возвращает true);

// Пример: Выведем таблицу умножения на 5
/*
        for (int i = 1; i <= 10; i++) {
            System.out.println("5 * " + i + " = " + 5 * i);
        }
*/

//      int i = 1; - это начальное значение переменной
//      i <= 10; - это условие, при котором будет выполняться цикл
//      i++ - это инкремент, то есть увеличение переменной на 1.
//      С 1 до 2, с 2 до 3, с 3 до 4 и т.д.

//  Улучшенный цикл for (foreach)
// Улучшенный цикл for(foreach) — перебирает массив от первого элемента до последнего
// и на каждой итерации выполняет тело цикла.
// for (объявление : выражение) { //операторы }
// Объявление: к новому объявленному блоку переменной осуществляется доступ,
// который имеет тип совместимый с элементами массива.
// Выражение: вычисляет нужное Вам в массиве цикла.
// Выражение может быть переменной или методом массива, вызов которого возвращает массив.

/*    String[] names = {"Олег", "Иван", "Дима", "Юля"};
        for (String name : names) {
            System.out.println(name);
        }
 */

//Тот же самый пример с использованием обычного for:

/*      String[] names1 = {"Олег", "Иван", "Дима", "Юля"};
        for (int i = 0; i <= names1.length; i++) {
            System.out.println(names1[i]);
        }
*/
// Ограничения цикла for-each
// Компактная форма for-each
// считается более читаемой, чем for, и правилом хорошего тона считается
// использовать именно for-each там, где это можно сделать. Однако for-each —
// менее универсальная конструкция, чем обычный for. Несколько простых случаев,
// где воспользоваться for-each не получится вовсе или получится, но с трудом.
// Пройтись по циклу с конца в начало. То есть прямого for-each аналога следующему коду нет:

/*        String[] names = {"Олег", "Иван", "Дима", "Юля"};
            for (int i = names.length - 1; i >= 0; i--){
            System.out.println(names[i]);
        }

*/

// For-each не подходит, если нужно внести изменения в массив.
// Например, поменять элементы местами.

/*        int[] array = {1, 7, 2, 6};
        for (int i = 0; i <= array.length; i++) {
            array[i] = array[array.length - i - 1];
            System.out.println(array[i]);
        }
*/

//Если нужно найти элемент в массиве и вернуть (или передать дальше) индекс искомого элемента,
//лучше воспользоваться обычным циклом for.
//Как выйти из цикла
//Для этого используются Операторы цикла — изменяют нормальное выполнение последовательности цикла в Java. Когда выполнение выходит из своей области, все объекты, которые были созданы автоматически в этой области будут уничтожены.
//Для выхода из цикла есть ключевые слова break — «прервать», continue — «возобновить».

//Оператор break
//Когда оператор break встречается внутри цикла, то цикл прерывается,
//а управление программой возобновляется со следующего оператора.
//Условия прерывания цикла в Java оформляют через if-ветвление.
//Главное, чтобы проверка выполнялась перед основной частью тела цикла.
//Так же break может быть использован для прекращения case в операторе switch

/*        for (int i = 1; i <=  5; i++) {
            if (i == 3) {
                break;
            }
            System.out.println(i);
        }
        System.out.println("Завершение метода");
 */
//Цикл for был прерван и все 5 чисел напечатаны не были.
//Далее программа продолжила выполнять код, следующий после цикла for
//и вывела сообщение “Завершение метода”.

//Оператор Continue
//Оператор continue — ключевое слово, которое может быть использовано в любой структуре цикла,
//и оно призывает цикл сразу же перейти к следующей итерации.
//В цикле for ключевое слово continue распоряжается процессом так,
//чтобы сразу же перейти к оператору обновления.
//В циклах while или do..while, контроль сразу же переходит в логическое выражение.

/*        for (int i = 1; i <=  5; i++) {
            if (i == 3) {
                continue;
            }
            System.out.println(i);
        }
        System.out.println("Завершение метода");

*/

//Вложенные циклы Java
//Циклы можно вкладывать один в другой.
//При этом число повторов наружного и вложенных циклов умножается.
//Если внешний должен выполняться 5 раз и внутренний – 5,
// всего цикл будет выполнен 25 раз.
// Выведем таблицу умножения с помощью двух массивов:

    int a, b, result;
    for (a = 2; a < 10; a++) {
        for (b = 2; b < 10; b++) {
            result = a * b;
            System.out.println(a + " x " + b + " = " + result + " ");
        }
        System.out.println(" ");
    }
        System.out.println("Конец");
    }
}